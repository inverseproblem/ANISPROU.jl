var documenterSearchIndex = {"docs":
[{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Author = \"Andrea Zunino\"","category":"page"},{"location":"#ANISPROU","page":"ANISPROU","title":"ANISPROU","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"ANalysis of ISothermal titration calorimetry data on sodium dodecyl sulphate mediated PRotein Unfolding.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Analysis of isothermal titration calorimetry (ITC) data on sodium dodecyl sulphate (SDS) mediated protein unfolding (ANISPROU) is a tool developed to globally fit an entire dataset and to extract thermodynamic values from this fit. ITC data on SDS mediated protein unfolding, at different protein concentrations, is used as an input for the fitting. The linearity of the features in the ITC data as a function of protein concentration allows the data to be fitted using a number of 3D beta functions, each representing a thermodynamic event. Besides the enthalpy of unfolding, the binding isotherm is also among the outputs. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Contents:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Installation","page":"ANISPROU","title":"Installation","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"To install the package simple enter into the package manager mode in Julia by typing \"]\" at the REPL prompt and then use add, i.e.,","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(v1.6) pkg> add ANISPROU","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The package will be automatically downloaded from the web and installed.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"warning: Warning\nAt the moment the package is not yet registered in the official Julia registry, so,  to install it run the following in package mode:(v1.6) pkg> add https://github.com/inverseproblem/ANISPROU.jl","category":"page"},{"location":"#Tutorial","page":"ANISPROU","title":"Tutorial","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"In the following a step-by-step tutorial illustrating how to process the ITC data is shown. The complete code is also available in the folder examples.","category":"page"},{"location":"#Read-the-data","page":"ANISPROU","title":"Read the data","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"First of all, import the package and read the data. The function readallexperiments takes care of reading the measred data from a ASCII/text file produced by some common instruments. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"However, the user can read/obtain the data in any other way, as long as it is possible to create a structure ITCObsData, which it is what is used in all the calculations (e.g., data fitting).","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"If using the readallexperiments function, the directory containing the data set and the file names must have a certain structure in order for the function reading the data to work. Such structure should be like the following example, where the directory name is the protein name IM7:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"  050_IM7.DAT\n  075_IM7.DAT\n  100_IM7.DAT\n  125_IM7.DAT\n  150_IM7.DAT","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"where the file names must follow the following rules:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"they must end with \".DAT\" or \".dat\"\nthey must contain the name of protein (e.g., \"IM7\") in the file name\nthe file format must be the same than the provided example (a commonly used instrument).","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Two optional parameters can be passed to readallexperiments, namely scalfactor (defaulting to 0.004184 to convert Cal/mol to kJ/mol) which scales the enthalpy values, and discninitrows (defaulting to 0) which skips a certain  number of initial rows from the data set because usually initial data are affected by strong instrument noise which could bias the subsequent fitting process.  See readallexperiments to adapt it to a different case.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Next step is to extract the concentration of SDS and protein, the measured enthalpy and the indices for each experiments (idxdata) in the global data set. We obtain a dictionary, data in this case, containing all necessary information. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"using PyPlot # hide\nPyPlot.ioff() # hide\nusing ANISPROU\n\ninpdir=\"../../examples/inputdata/\" # directory containing input data\nprotein = \"IM7\" # protein name\ndata = readallexperiments(inpdir,[protein]) \nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Then instantiate the ITCObsData structure containing the measured (observed) enthalpy values along with other information. See ITCObsData.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"sdscon = data[protein][\"sdscon\"]\nprocon = data[protein][\"procon\"]\nenthalpy = data[protein][\"enout\"] \nidxdata = data[protein][\"idxdata\"]\n\ndobs = ITCObsData(protein=protein,enthalpy=enthalpy,idxdata=idxdata,sdsprotcon=[sdscon procon])","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The x axis represents the SDS concentration, while the y axis the protein concentration. To plot the observed data one can use the function plotobsdata:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotobsdata(dobs)\nsavefig(\"plotobsdata.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: ) Another way of visualising the observed data is plotting each single experiment in 1D using plotsingleexperiments:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"outdir=\"figs\"\nplotsingleexperiments(outdir,dobs)\nsavefig(\"plotsingexpobs.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"#setupip","page":"ANISPROU","title":"Setup the inverse problem: fitting the enthalpy data","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Now define the parameters of the 2D Beta functions: the type of function for the mode, concentration parameter and amplitude (e.g., linear), the x and y limits in terms of minimum and maximum of SDS and protein concentrations. See ScaledBeta2DParams. Often enlarging by a little bit the domain on the x axis helps the Beta functions to better fit the data.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"a = 0.99*minimum(dobs.sdsprotcon[:,1]) # lower bound for beta domain\nb = 1.05*maximum(dobs.sdsprotcon[:,1]) # upper bound for beta domain\n\nminprotcon = minimum(dobs.sdsprotcon[:,2]) \n# setting the maximum SDS concentration higher than the maximum experimental value!\nmaxprotcon = 1.05*maximum(dobs.sdsprotcon[:,2]) \n\n## define the parameters of Beta 2D functions\nmodefuny = \"linear\"\nkonfuny  = \"linear\"\nampfuny  = \"linear\"\nbetpar = ScaledBeta2DParams(modefuny=modefuny,konfuny=konfuny,ampfuny=ampfuny,a=a,b=b,ymin=minprotcon,ymax=maxprotcon)\n","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Now we need to define a so-called starting model, i.e., a set of parameters for the Beta functions (mode, concentration and amplitude) which constitutes our initial guess in order to fit the measured enthalpy data.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The starting model is represented by a 2D array where the number of rows is the number of Beta functions components. Each column contains the set of parameters necessary to define a  single Beta component, namely mode, confidence parameter and amplitude.  If we set the all the functions for mode, concentration and amplitude to be linear (see above), then the parameters of the Beta functions (mode, confidence and amplitude) will vary along y (protein concentration) following the equation of a straight line passing through two poins:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":" y = dfrac(y_2-y_1)(x_2-x_1) (x-x_1) + y_1","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"where y_1, y_2, x_1 and  x_2 are given as explained in the following. x_1 and  x_2 represent the value of the Beta parameters at the minimum and maximum protein concentration y_1 and y_2 specified in the structure ScaledBeta2DParams, called ymin and ymax.  Then the elements of the column vector represent the following:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"elements 1 and 2: value of the mode at the two points where the protein concentration equals betpar.ymin betpar.ymax, part of the structure ScaledBeta2DParams\nelements 3 and 4: value of the confidence parameter at the two points where the protein concentration equals betpar.ymin betpar.ymax, part of the structure ScaledBeta2DParams\nelements 5 and 6: value of the mode at the two points where the protein concentration equals betpar.ymin betpar.ymax, part of the structure ScaledBeta2DParams.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"In the following we create a starting model use 4 Beta components. To add more (remove) components we can simple add more (remove) columns in mstart.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# Elements are: 2 for mode, 2 for the confidence parameter and\n#   2 for the amplitude parameter\ncomp1 = [0.6,  1.5,  35.0, 30.0, -2.5,  -5.0 ]\ncomp2 = [1.7,  4.8,  60.0, 40.0, -1.6,  -4.0 ] \ncomp3 = [4.5,  10.0, 40.0, 30.0, 0.12, 0.16 ] \ncomp4 = [6.2,  15.3, 60.0, 40.0, -1.6, -2.0 ]\n\n# mstart is a 2D array where each column represents one component\nmstart = [comp1 comp2 comp3 comp4]\n\t\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"To visually check the goodness of our first guess we can plot it using","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotinitialguess(betpar,dobs,mstart)\nsavefig(\"plotinitguess.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"#invprobsect","page":"ANISPROU","title":"Solve the inverse problem: find optimal mix of Beta functions","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The solution of the inverse problem, that is, finding the set of model parameters which produces a \"best\" fit to the observed data is based on a constrained Newton method. The Newton method requires the computation of both the gradient of the misfit function with respect to model parameters and the Hessian matrix. Both gradient and Hessian matrix are calculated using automatic differentiation, specifically using the \"forward mode\" approach provided by the ForwardDiff.jl package.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"First, we need to set the constraints for the Newton optimization. That can be done by specifying the lower and upper bounds for each parameter of each single component as following:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# lower constraints [confidence must be >2.0]\nlcs1 = [betpar.a, betpar.a, 2.1, 2.1, -20.0, -20.0] \nlcs2 = [betpar.a, betpar.a, 2.1, 2.1, -20.0, -20.0] \nlcs3 = [betpar.a, betpar.a, 2.1, 2.1,   0.0,   0.0] \nlcs4 = [betpar.a, betpar.a, 2.1, 2.1, -20.0, -20.0] \nlowconstr = [lcs1 lcs2 lcs3 lcs4]\n\n# upper constraints\nucs1 = [betpar.b, betpar.b, 500.0, 500.0,  0.0,  0.0] \nucs2 = [betpar.b, betpar.b, 500.0, 500.0,  0.0,  0.0] \nucs3 = [betpar.b, betpar.b, 500.0, 500.0, 10.0, 10.0] \nucs4 = [betpar.b, betpar.b, 500.0, 500.0,  0.0,  0.0] \nupconstr = [ucs1 ucs2 ucs3 ucs4] \n\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"In order to solve the inverse problem we need a covariance matrix (symmetric positive-definite) representing the uncertainty on the observed data. What is actually required by the software is the inverse of such covariance matrix invCd, i.e., if mathbfC_D is the covariance matrix on the observations, representing the noise on the data, we need to input the code mathbfC^-1_D, sometimes called the precision matrix. Fine tuning the covariance/precision matrix for specific observed data known to be highly uncertain (or simply wrong) may significantly help the inversion process. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"using LinearAlgebra\nnobs = length(dobs.enthalpy)\nstdobs = 0.2 .* ones(nobs) # standard deviation of the error on measured data\nstdobs[1:2] .= 0.8 # specify higher uncertainty for first two points\nstdobs[end-5:end] .= 0.5\ninvCd = inv(diagm(stdobs.^2)) # in this case a diagonal precision matrix\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Now we can run the Newton optimization algorithm to solve the inverse problem, provided also a starting model as explained in the previous section. The algorithm is from the package Optim.jl, specifically it is an interior-point primal-dual Newton algorithm . The optization is launched by the following code, where outdir is the directory where the output results will be written. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"outdir = \"output\"\nbetamix = solveinvprob(betpar,dobs,invCd,mstart,lowconstr,upconstr,outdir)\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The output betamix is a structure of type BetaMix2D which holds the optimized parameters and other additional information. The results are saved in the directory defined by the variable output both in the HDF5 format, including all parameters of the inversion and as a simple set of text files (.dat).","category":"page"},{"location":"#Additional-nonlinear-constraints","page":"ANISPROU","title":"Additional nonlinear constraints","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The function solveinvprob accepts an additional optional parameter applynonlinconstr which, when set to true adds a set of nonlinear constraints to the Newton optimization. These constraints are a zero (or minimum) area for each Beta component at protein concentration equal to zero and some other constraints on the modes and confidence parameters requiring the solution to have modes within bound at protein concentration equal to zero and an increasing confidence parameter for decreasing protein concentration. The optional positive parameter constrarea defines (when applynonlinconstr=true) a constraint for the area of sum of the mix of Beta function at protein concentration equal to zero.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"betamix = solveinvprob(betpar,dobs,invCd,mstart,lowconstr,upconstr,outdir,applynonlinconstr=true,constrarea=6.0)\nnothing # hide","category":"page"},{"location":"#Plotting-results","page":"ANISPROU","title":"Plotting results","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Finally, it is possible to visualize the results as following:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"outdir = \"figs\"\nplotresults(betamix,dobs,mstart,outdir)\nsavefig(outdir*\"/IM7_results.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The function plotsingleexperiments provides a way to show the fit of the solution to the single experiments, i.e., enthalpy for different initial protein concentrations. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# plot fit to single experiments\noutdir=\"figs\"\nplotsingleexperiments(outdir,dobs,betamix)\nsavefig(outdir*\"/IM7_experiment1.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: ) Another plot is that of parameter values versus protein concentration, where the black lines represent the bounds derived from the experimental data:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotparamlines(betamix)\noutdir=\"figs\" # hide\nsavefig(outdir*\"/IM7_paramlines.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: ) It's also possible to plot Beta function components and their sum for fixed protein concentration, e.g.:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotbetacomp1D(betamix,0.148)\nsavefig(\"plotsingcomp.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"#Plot-the-3D-surface-vs.-observed-data","page":"ANISPROU","title":"Plot the 3D surface vs. observed data","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"It is possible to make a 3D plot showing the surface defined by the Beta mix and, in addition, the set of observed data as circles.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotsurface3D(dobs,betamix,markersize=3500,savefig=true,outdir=\"figs\")\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"#Estimation-of-the-binding-isotherm","page":"ANISPROU","title":"Estimation of the binding isotherm","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The binding isotherm can be estimated by defining a set of points or \"features\" on the 2D Beta functions such that given features for a certain protein concentration can be related to corresponding features at different protein concentrations. Such features could be, for instance, the peaks of the curves or their inflection points. A set of the same feature for different protein concentrations should produce a trend close to a straight line, which can be used to estimate the binding isotherm. The angular coefficient of such straight line will then represent the binding number N_rm bound and the intercept the concentration of free SDS SDS_rm free. The two are in fact related by the following relation:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":" mathrmSDS_rm total =  mathrmSDS_rm free + N_rm bound mathrmProtein","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"where  represents the concentration.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Thus, to estimate the binding isotherm, we start by finding a set of features, in this case stationary and inflection points at given values of protein concentration (in this case 4 values):","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"ny = 4 # number of protein concentrations to investigate\nprotcon = collect(LinRange(betamix.betpar.ymin,betamix.betpar.ymax,ny)) # set of protein concentrations\nstatpts,inflpts = findcurvefeatures(betamix,protcon) # find features\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"To plot the found features one can do the following:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# plot found points/features\noutdir = \"figs\"\nplotfoundfeatures(betamix,protcon,statpts,inflpts,outdir)\nsavefig(\"plotfeat.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"The next step involves selecting a subset of the found points to construct the binding isotherm: this can be done by looking at the previous plot and picking only desired points. The numbers on the plot nearby the found points correspond to the index in the array of found points.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# ===========================================\n# Selection of local minima and maxima\nselectstatpts = Vector{Array{<:Real,2}}(undef,0)\n\npush!(selectstatpts, [ statpts[1][2] protcon[1];\n                       statpts[2][2] protcon[2];\n                       statpts[3][2] protcon[3];\n                       statpts[4][2] protcon[4] ] )\n\npush!(selectstatpts, [ statpts[2][3] protcon[2];\n                       statpts[3][3] protcon[3];\n                       statpts[4][3] protcon[4] ] )\n\npush!(selectstatpts, [ statpts[1][3] protcon[1];\n                       statpts[2][5] protcon[2];\n                       statpts[3][5] protcon[3];\n                       statpts[4][5] protcon[4] ] )\n\npush!(selectstatpts, [ statpts[1][4] protcon[1];\n                       statpts[2][6] protcon[2];\n                       statpts[3][6] protcon[3];\n                       statpts[4][6] protcon[4] ] )\n\n# ===========================================\n# Selection of inflection points\nselectinflpts = Vector{Array{<:Real,2}}(undef,0)\n    \npush!(selectinflpts, [ inflpts[1][1] protcon[1];\n                       inflpts[2][2] protcon[2];\n                       inflpts[3][2] protcon[3];\n                       inflpts[4][2] protcon[4] ] )\n\npush!(selectinflpts, [ inflpts[1][2] protcon[1];\n                       inflpts[2][3] protcon[2];\n                       inflpts[3][3] protcon[3];\n                       inflpts[4][3] protcon[4] ] )\n\npush!(selectinflpts, [ inflpts[1][4] protcon[1];\n                       inflpts[2][5] protcon[2];\n                       inflpts[3][5] protcon[3];\n                       inflpts[4][5] protcon[4] ] )\n\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Once we have a set of set of features we can estimate the best fitting straight lines for each set by performing a least squares linear regression with calcfreeSDSNbound. ","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"# find the straight line by least squares\nfreeSDS,Nbound,resstdev = calcfreeSDSNbound(protcon,statpts,inflpts,selectstatpts,selectinflpts,outdir,dobs.protein) # do the linear regression\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"resstedev is a vector containing the standard deviation of the residuals of the regression for each point of the binding isotherm.","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Finally, the resulting binding isotherm is plotted with the following:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"outdir = \"figs\"\nplotbindisotherm(betamix,protcon,dobs,statpts,inflpts,freeSDS,Nbound,outdir,resstdev=resstdev)\nsavefig(\"plotbindisoth.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"#Calculating-areas-and-volumes","page":"ANISPROU","title":"Calculating areas and volumes","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Compute the area for each Beta component at requested protein concentration using area_enthalpy:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"protcon = 0.08 # requested protein concentration\narea,errarea = area_enthalpy(betamix,protcon) # compute area\nprintln(\"Area at protein concentration $protcon for each component: \\n$area, \\nintegration error\\n $errarea\\n\")\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"It is also possible to calculate the area for each Beta component for a set of different protein concentrations and plot it using areasvsprotcon and plotareavsprotcon:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"N = 15\nprotcons = collect(LinRange(0.0,0.14,N)) # set of protein concentrations\nareas,erras,linfitres,resstdev = areasvsprotcon(betamix,protcons,outdir,protein)\nplotareavsprotcon(protein,protcons,areas,linfitres,resstdev,outdir) # plot area as a function of protein concentration\nsavefig(\"plotsetareas.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Alternatively, a function to plot the value of model parameters and areas as a function of protein concentration is available, plotparamlines","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotparamlines(betamix,protcons,areas)\nsavefig(\"plotareasparlines.svg\") # hide\nnothing # hide","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"(Image: )","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"Compute the volume for all Beta components within requested bounds of protein concentration using volume_enthalpy:","category":"page"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"minprotcon = betamix.betpar.ymin  # lower bound for integral\nmaxprotcon = betamix.betpar.ymax  # upper bound for integral\nvolume,errvol = volume_enthalpy(betamix,minprotcon,maxprotcon) # compute volume\nprintln(\"Volume within bounds for each component: \\n$volume, \\nintegration error\\n $errvol\\n\")\nnothing # hide","category":"page"},{"location":"#Public-API","page":"ANISPROU","title":"Public API","text":"","category":"section"},{"location":"#General-calculations","page":"ANISPROU","title":"General calculations","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"ANISPROU\nreadallexperiments\nITCObsData\nScaledBeta2DParams\nBetaMix2D\nsolveinvprob\nfindcurvefeatures\ncalcfreeSDSNbound\narea_enthalpy\nareasvsprotcon\nvolume_enthalpy","category":"page"},{"location":"#ANISPROU","page":"ANISPROU","title":"ANISPROU","text":"ANISPROU\n\nAnalysis of isothermal titration calorimetry (ITC) data on sodium dodecyl sulphate (SDS) mediated protein unfolding.\n\nExports\n\nBetaMix2D\nITCObsData\nScaledBeta2DParams\narea_enthalpy\nareasvsprotcon\ncalcfreeSDSNbound\nfindcurvefeatures\nplotareavsprotcon\nplotbetacomp1D\nplotbindisotherm\nplotfoundfeatures\nplotinitialguess\nplotobsdata\nplotparamlines\nplotresults\nplotsingleexperiments\nplotsurface3D\nreadallexperiments\nsaveresultVTK\nsolveinvprob\nvolume_enthalpy\n\n\n\n\n\n","category":"module"},{"location":"#ANISPROU.readallexperiments","page":"ANISPROU","title":"ANISPROU.readallexperiments","text":"readallexperiments(inpdir::String, proteinnames::Vector{String}; scalfactor, discninitrows) -> Dict{Any, Any}\n\n\nReal from ASCII files all observed/measured data from a set of experiments. It can read data for one or more proteins. The entalphy values are scaled by a factor given by the argument scalfactor,   which defaults to 0.004184 (Cal/mol to kJ/mol).\n\nArguments\n\ninpdir: directory containing the input data\nproteinnames: array of strings containing the names of proteins\nscalfactor=0.004184: scaling factor for enthalpy, defaults                        to 0.004184 (Cal/mol to kJ/mol)\ndiscninitrows=0: number of initial rows of the data set to discard. This is used                   to remove some initial data often affected by strong                    instrument noise which could bias the fitting process.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.ITCObsData","page":"ANISPROU","title":"ANISPROU.ITCObsData","text":"struct ITCObsData\n\nStructure containing the observed (measured) data, i.e. the enthalpy, the protein and SDS concentration.\n\nFields\n\nenthalpy::Vector{var\"#s9\"} where var\"#s9\"<:Real\nEnthalpy values\nidxdata::Vector{UnitRange{Int64}}\nIndices pointing to single experiments data\nsdsprotcon::Matrix{var\"#s8\"} where var\"#s8\"<:Real\nConcentration of SDS (first column) and protein (second column)\nprotein::String\nName of the protein\n\n\n\n\n\n","category":"type"},{"location":"#ANISPROU.ScaledBeta2DParams","page":"ANISPROU","title":"ANISPROU.ScaledBeta2DParams","text":"struct ScaledBeta2DParams\n\nStructure containing the parameters of the 2D Beta functions.\n\nFields\n\nnummodpar::Integer\nnumber of model parameters\nmodefuny::String\ntype of function on y (protein concentration) for the mode\nkonfuny::String\ntype of function on y (protein concentration) for the confidence parameter\nampfuny::String\ntype of function on y (protein concentration) for the amplitude\na::Real\nlower bound for Beta function (along x, i.e. SDS concentration)\nb::Real\nupper bound for Beta function (along y, i.e. protein concentration)\nymin::Real\nuser defined minimum y (protein concentration)\nymax::Real\nuser defined maximum y (protein concentration)\nidxmode::Integer\nstarting index in the vector of model parameters for mode\nidxkon::Integer\nstarting index in the vector of model parameters for confidence parameter\nidxamp::Integer\nstarting index in the vector of model parameters for amplitude parameter\n\n\n\n\n\n","category":"type"},{"location":"#ANISPROU.BetaMix2D","page":"ANISPROU","title":"ANISPROU.BetaMix2D","text":"struct BetaMix2D\n\nStructure containing the observed (measured) data, i.e. the enthalpy, the protein and SDS concentration.\n\nFields\n\nbetpar::ScaledBeta2DParams\nstructure containing the parameters of the 2D Beta functions\nmodkonamp::Matrix{var\"#s13\"} where var\"#s13\"<:Real\n2D array where each column is a set of mode, confidence and amplitude parameters\nprotein::String\nname of the protein\n\n\n\n\n\n","category":"type"},{"location":"#ANISPROU.solveinvprob","page":"ANISPROU","title":"ANISPROU.solveinvprob","text":"solveinvprob(betpar::ScaledBeta2DParams, dobs::ITCObsData, invCd::Matrix{var\"#s89\"} where var\"#s89\"<:Real, mstart::Matrix{var\"#s90\"} where var\"#s90\"<:Real, lowconstr::Matrix{var\"#s91\"} where var\"#s91\"<:Real, upconstr::Matrix{var\"#s92\"} where var\"#s92\"<:Real, outdir::String; applynonlinconstr, constrarea) -> BetaMix2D\n\n\nSolve the inverse problem, i.e., fit the measured enthalpy data,    using an Interior Point Newton method from the Optim.jl package.\n\nArguments\n\nbetpar: a struct containing the parameters for the Beta functions           See ScaledBeta2DParams\ndobs: a struct containing the observed (measured) data and concentrations           See ITCObsData\ninvCd: inverse of the covariance matrix on observations (precision matrix)\nmstart: the starting model\nlowconstr: array of lower constraints for all parameters\nupconstr: array of upper constraints for all parameters\noutdir: output directory to save results\napplynonlinconstr=false: optional parameter determining whether to use or                             not the nonlinear constraints\nconstrarea=Inf: a positive real number defining the upper constraint for the value of area (enthalpy) at protein concentration equal to zero\n\nReturns\n\nA structure holding Beta parameters and the solution in terms of mode, confidence parameter and amplitude. It also saves all the setup of the problem and a set of parameters to an HDF5 file. \n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.findcurvefeatures","page":"ANISPROU","title":"ANISPROU.findcurvefeatures","text":"findcurvefeatures(betamix::BetaMix2D, protcon::Vector{var\"#s92\"} where var\"#s92\"<:Real) -> Tuple{Vector{Vector{Float64}}, Vector{Vector{Float64}}}\n\n\nDefine a set of features on the Beta mix to subsequently compute the binding isotherm. It uses the stationary and inflection points at given protein concentrations (protcon). \n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.calcfreeSDSNbound","page":"ANISPROU","title":"ANISPROU.calcfreeSDSNbound","text":"calcfreeSDSNbound(protcons::Vector{var\"#s87\"} where var\"#s87\"<:Real, statpts::Array{Vector{Float64}, N} where N, inflpts::Array{Vector{Float64}, N} where N, selectstatpts::Vector{var\"#s86\"} where var\"#s86\"<:(Matrix{var\"#s85\"} where var\"#s85\"<:Real), selectinflpts::Vector{var\"#s84\"} where var\"#s84\"<:(Matrix{var\"#s83\"} where var\"#s83\"<:Real), outdir::String, protein::String) -> Tuple{Any, Any, Any}\n\n\nCalculate the concentration of free SDS (freeSDS) and binding number (NBound).\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.area_enthalpy","page":"ANISPROU","title":"ANISPROU.area_enthalpy","text":"area_enthalpy(betamix::BetaMix2D, protcon::Real; volumescal) -> Tuple{Vector{Float64}, Vector{Float64}}\n\n\nCalculate the area of each individual Beta function for a given protein concentration.  The SDS concentration axis needs a unit conversion which is handled by the volumescal  arguments.\n\nArguments\n\nbetamix: structure of type BetaMix2D containing the parameters of the Beta functions,            the modes, confidence parameters and amplitudes and protein name\nprotcon: protein concentration value (y axis) at which to perform the calculation of the area\nvolumescal: scaling factor in μl to convert from mM to mole, instrument dependent. The default               is 203.0μl.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.areasvsprotcon","page":"ANISPROU","title":"ANISPROU.areasvsprotcon","text":"areasvsprotcon(betamix::BetaMix2D, protcons::Vector{Float64}, outdir::String, protein::String; volumescal) -> Tuple{Matrix{Float64}, Matrix{Float64}, Matrix{Float64}, Vector{Float64}}\n\n\nCalculate the area of each individual Beta function for a set of  protein concentrations.\n\nArguments\n\nbetamix: structure of type BetaMix2D containing the parameters of the Beta functions,            the modes, confidence parameters and amplitudes and protein name\nprotcosn: array of protein concentrations at which to calculate the areas\nvolumescal: scaling factor in μl to convert from mM to mole, instrument dependent. The default               is 203.0μl.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.volume_enthalpy","page":"ANISPROU","title":"ANISPROU.volume_enthalpy","text":"volume_enthalpy(betamix::BetaMix2D, minprotcon::Real, maxprotcon::Real; volumescal) -> Tuple{Vector{Float64}, Vector{Float64}}\n\n\nCalculate the volume of each single Beta function within given bounds of protein concentration. The SDS concentration axis needs a unit conversion which is handled by the volumescal  arguments.\n\nArguments\n\nbetamix: structure of type BetaMix2D containing the parameters of the Beta functions,            the modes, confidence parameters and amplitudes and protein name\nminprotcon: lower bound of protein concentration value (y axis) to perform the integral\nmaxprotcon: upper bound of protein concentration value (y axis) to perform the integral\nvolumescal=203.0: scaling factor in μl to convert from mM to mole, instrument dependent. The default               is 203.0μl.\n\n\n\n\n\n","category":"function"},{"location":"#Plotting","page":"ANISPROU","title":"Plotting","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"plotobsdata\nplotinitialguess\nplotresults\nplotsingleexperiments\nplotfoundfeatures\nplotbindisotherm\nsaveresultVTK\nplotsurface3D\nplotareavsprotcon\nplotbetacomp1D\nplotparamlines","category":"page"},{"location":"#ANISPROU.plotobsdata","page":"ANISPROU","title":"ANISPROU.plotobsdata","text":"plotobsdata(dobs)\n\n\nPlot the observed data as a scatter plot.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotinitialguess","page":"ANISPROU","title":"ANISPROU.plotinitialguess","text":"plotinitialguess(betpar, dobs, mstart)\n\n\nPlot the fit to the enthalpy data as a result of the initial guess, i.e., the starting model parameters of the Beta functions.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotresults","page":"ANISPROU","title":"ANISPROU.plotresults","text":"plotresults(betamix, dobs, mstart, outdir)\n\n\nPlot the results of inverting the ITC data to fit the enthalpy function in 2D.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotsingleexperiments","page":"ANISPROU","title":"ANISPROU.plotsingleexperiments","text":"plotsingleexperiments(outdir, dobs)\nplotsingleexperiments(outdir, dobs, betamix)\n\n\nPlot each single experiment, i.e., enthalpy for an initial protein concentration and increasing SDS concentration. If the third argument betamix is passed, shows a comparison of measured and calculate data (from results of inversion) including each single Beta component.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotfoundfeatures","page":"ANISPROU","title":"ANISPROU.plotfoundfeatures","text":"plotfoundfeatures(betamix, protcon, statpts, inflpts, outdir)\n\n\nPlot the points/features defined on the enthalpy curves to find the binding isotherm.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotbindisotherm","page":"ANISPROU","title":"ANISPROU.plotbindisotherm","text":"plotbindisotherm(betamix, protcon, dobs, statpts, inflpts, freeSDS, Nbound, outdir; resstdev)\n\n\nPlot the results of binding isotherm calculations using the Beta mix, i.e., sum of all Beta fitting functions.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.saveresultVTK","page":"ANISPROU","title":"ANISPROU.saveresultVTK","text":"saveresultVTK(protein, betpar, mpost)\n\n\nSave the fitting surface in the VTK format for Paraview.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotsurface3D","page":"ANISPROU","title":"ANISPROU.plotsurface3D","text":"plotsurface3D(dobs, betamix; yscal, zscal, markersize, displayfig, ymin, ymax, savefig, outdir) -> Makie.Figure\n\n\nPlot the a 3D surface from the Beta mix together measured data as circles.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotareavsprotcon","page":"ANISPROU","title":"ANISPROU.plotareavsprotcon","text":"plotareavsprotcon(proteinname, protcons, areas, linfitres, resstdev, outdir)\n\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotbetacomp1D","page":"ANISPROU","title":"ANISPROU.plotbetacomp1D","text":"plotbetacomp1D(betamix, protcon)\n\n\nPlot the components and the sum of Beta functions for a given protein concentration.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotparamlines","page":"ANISPROU","title":"ANISPROU.plotparamlines","text":"plotparamlines(betamix)\nplotparamlines(betamix, protcons)\nplotparamlines(betamix, protcons, areas)\n\n\nPlot the lines defined by the model parameters as a function of protein concentration.\n\n\n\n\n\n","category":"function"},{"location":"#Other-non-exported-functions","page":"ANISPROU","title":"Other non-exported functions","text":"","category":"section"},{"location":"","page":"ANISPROU","title":"ANISPROU","text":"ANISPROU.lssqregr\nANISPROU.plotmodelines\nANISPROU.getmodparbeta\nANISPROU.forwmod2D\nANISPROU.readsingleexperiment\nANISPROU.singlescaledbeta2D \nANISPROU.scaledbeta\nANISPROU.misfitfunctional\nANISPROU.misfareaenth\nANISPROU.misfitbeta2D\n","category":"page"},{"location":"#ANISPROU.lssqregr","page":"ANISPROU","title":"ANISPROU.lssqregr","text":"lssqregr(points::Matrix{var\"#s2\"} where var\"#s2\"<:Real) -> Tuple{Any, Any, Any}\n\n\nLeast squares linear regression in its simplest form.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.plotmodelines","page":"ANISPROU","title":"ANISPROU.plotmodelines","text":"plotmodelines(betpar, mcur, modname; firstidpar)\n\n\nPlot the lines defined by the modes (default) or, optionally, other    parameters (see firstidpar).\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.getmodparbeta","page":"ANISPROU","title":"ANISPROU.getmodparbeta","text":"getmodparbeta(betpar::ScaledBeta2DParams, mcur::Vector{var\"#s8\"} where var\"#s8\"<:Real, ycur::Real) -> Tuple{Any, Any, Any}\n\n\nGet the parameters (mode, confidence, amplitude) of the Beta functions for given y (protein concentration).\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.forwmod2D","page":"ANISPROU","title":"ANISPROU.forwmod2D","text":"forwmod2D(betpar::ScaledBeta2DParams, xy::Matrix{var\"#s9\"} where var\"#s9\"<:Real, mcur::Matrix{var\"#s8\"} where var\"#s8\"<:Real) -> Vector{Real}\n\n\nCompute the forward response for given input parameters, i.e. the enthalpy   values (2D) for given Beta functions (2D) parameters.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.readsingleexperiment","page":"ANISPROU","title":"ANISPROU.readsingleexperiment","text":"readsingleexperiment(singlefl::String) -> Tuple{Any, Any, Any}\n\n\nReal from ASCII file the observed/measured data from an experiment.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.singlescaledbeta2D","page":"ANISPROU","title":"ANISPROU.singlescaledbeta2D","text":"singlescaledbeta2D(betpar::ScaledBeta2DParams, xy::Matrix{var\"#s8\"} where var\"#s8\"<:Real, mcur::Vector{var\"#s6\"} where var\"#s6\"<:Real) -> Vector{Real}\n\n\n2D-fied scaled Beta function for given x (SDS concentration) and y (protein concentration) values.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.scaledbeta","page":"ANISPROU","title":"ANISPROU.scaledbeta","text":"scaledbeta(mo::Real, kon::Real, a::Real, b::Real, amplscale::Real, x::Real) -> Any\n\n\n1D modified scaled Beta function.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.misfitfunctional","page":"ANISPROU","title":"ANISPROU.misfitfunctional","text":"misfitfunctional(betpar::ScaledBeta2DParams, dobs::ITCObsData, invCd::Matrix{var\"#s11\"} where var\"#s11\"<:Real, mcur::Matrix{var\"#s9\"} where var\"#s9\"<:Real) -> Any\n\n\nCalculate the sum of the misfit for observed (measured) and calculated data and   the misfit of the integral of enthalpy (which should be zero) at zero protein   concentration.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.misfareaenth","page":"ANISPROU","title":"ANISPROU.misfareaenth","text":"misfareaenth(betpar::ScaledBeta2DParams, mcur2d::Matrix{var\"#s8\"} where var\"#s8\"<:Real) -> Any\n\n\nMisfit functional for area of enthalpy (unscaled in this case): zero   area at protein concentration equal to zero.\n\n\n\n\n\n","category":"function"},{"location":"#ANISPROU.misfitbeta2D","page":"ANISPROU","title":"ANISPROU.misfitbeta2D","text":"misfitbeta2D(betpar::ScaledBeta2DParams, dobs::ITCObsData, invCd::Matrix{var\"#s11\"} where var\"#s11\"<:Real, mcur::Matrix{var\"#s9\"} where var\"#s9\"<:Real) -> Any\n\n\nCalculate misfit between observed/measured and calculated data.\n\n\n\n\n\n","category":"function"}]
}
